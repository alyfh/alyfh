一
	1.angular适用场景/不适用的场景
	        AngularJS主要考虑的是构建CRUD应用
	       （增加Create、查询Retrieve、更新Update、删除Delete）
	        如酷炫的特效，动画，游戏等，这种DOM操作很频繁也很复杂的应用，和CRUD应用就有很大的不同，它们不适合用AngularJS来构建
	2.angular特性：指令系统，模块系统，MVC模式，依赖注入，数据双向绑定

	3.Angular的MVC
		M-Model
		V-view
		C-controller
	4.ng-init初始化
	5.ng-bind绑定数据

	6.ng-app 无
		 有 


	7.controller 一个页面可以有很多controller，一个控制器可以被多次调用，每一次调用都会创建一个scope,每个scope上面的属性和方法都是私有的。

	8.	$scope 局部作用域 -ng-controller
		$rootScope 全局作用域 -ng-app

	9.ng-model 数据双向绑定 (MVVM)

二
	1.数据绑定有几种？
		3
		ng-bind 绑定非表单元素 优点：不会出现闪屏
		{{}} 方便快捷 缺点：会出现闪屏
		ng-model  绑定表单元素
	2.ng-cloak 解决闪屏
		.ng-cloak{
			display: none;
		}
	3.  ng-if true 显示，false-消失
			false ---惰性加载
		ng-show true 显示，false-消失
			false----display:none;

		ng-hide true 消失 false-出现
			true  ----display:none;
		注意：0false ,非0-true

	4.	ng-src
		ng-href

	5. ng-repeat ********
		$index 下标
		$first 第一个true,其他false
		$last 最后一个true,其他false
		$middle 除了第一个，最后一个，其他true
		$even 下标偶数true
		$odd 下标奇数true

		ng-repeat="(key,value) in json"

		原生js:

			for,while,do-while都可以遍历array
				while:先判断，后执行  
				do-while:先执行，后判断
				for：知道执行次数

			for-in	可以遍历json

三
	1.ng-class
		ng-class="classN"
		ng-class="{true:'red',false:'lime'}[isRed]"
		ng-class="{'red':true,'lime':true,'blue':isBlue}"
	2.ng-style
		ng-style="{}"
		json:关键字，保留字必须加""有连字符必须加"",
			//取值，关键字，保留字，变量，必须用[]*/
	3.ng-value
	4.ng-disabled
	5.ng-readonly

四
	1.ng-value--绑定的是表单经过计算的表达式
		ng-model--绑定的是一个属性
		
	2.ng-disabled="bool"
		true-禁用
		false-可用
	3.ng-readonly=“bool"
		true-只读
		false-可用

	4.ng-options="i.name as i.name group by i.type for i in job"

五
	1.请求文件如果是xml,返回的数据就是xhr.responseXML，其他文件，xhr.responseText

	2.防止有缓存，我们加_=Math.random()/new Date().getTime()

	3.XML和json
	   1.json小，省流量，速度快，用户体验度好
	   2.js解析json方便，快捷，还有方便的API
	4.xml,处理document.getElementsByTagName innerHTML innerText

	5.
	function ajaxGet(url,fn){
	   var xhr=new XMLHttpRequest();
	   xhr.open("get",url,true);
	   xhr.send();
	   xhr.onreadystatechange=function(){
	       if(xhr.readyState==4){
	          if(xhr.status==200){
		fn(xhr.responseText);
	          }else{
	                alert("error!!")
	          }
	        }
	   }
	}


	6.post 

	    var xhr=new XMLHttpRequest();
	    xhr.open("post","source/form2.php",true);
	    xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");
	    xhr.send("user="+input[0].value+"&pass="+input[1].value+"&_="+new Date().getTime());


	*****xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");


	7.get和post区别
		1）大小：get小
		2）安全：post安全
		3）性能：get好

	8.异步优点：
		省流量，速度快，用户都体验度
		
	9.jsonp
		1)创建一个script标签
		2)给script的src一个路径url
		3)插入页面

六
	过滤器
	1.作用：转换数据
	2.用法： |
	3.内置过滤器
		1.uppercase
		2.lowercase
		3.json
		4.date :'yyyy-MM-dd hh:mm:ss'
		5.number
			不传参：千分位分割
			传参：小数点后保留几位
		6.limitTo:限制数组/string的长度（+-）
		7.currency
			默认：$
			"￥"，"RMB"
		8.orderBy 排列数组
			参数：数组元素的某一个属性，默认升序，降序‘-’
			多个参数：['age','-origin']
		
		9.filter
			1.string/变量  ‘女’
			2.{“sex”:'女'}
			3.fn 参数是过滤的数组的每一项，返回true,要，返回false,不要
	自定义过滤器
	angular.module('app',[])
	.filter('myfilter',function(){
		return function(过滤的对象){
			。。。。
			return 处理后的结果
		}
	})

七
	1.服务：实例化对象，只能实例化一次，功能：提供数据和对象
	2.内置服务
		$location: absUrl()
		$timeout
		$interval
			cancel
		$http({
			url:"1.txt",
			method:"get/post"
		}).success(function(){})
		.error(function(){})

八
	1.angular.module("app",[]).directive(name,function(){
		return {
			restrict:"ECMA",
			template/templateUrl:"fdfhjj"，
			replace

		}
	})
	restrict:
	E:元素
	C:类名
	M:注释
	A:属性
	常用：EA，默认：A

	name:如果出现大写myDirective,my-directive


	template:string/fn/$templateCache
		fn(tele,tattr)
		$templateCache put/get
	templateUrl:01.html--异步加载（服务器上运行
	）
	replace:true替换
	2.scope:
		false 默认 继承不隔离
		true 继承隔离
		{}  独立scope
			独立scope三种绑定策略
			@ 单向属性绑定
			= 双向属性绑定
			& 绑定方法

生命周期
	基于指令与组件的区别来分类:
		1、指令与组件共有的钩子：
			ngOnChanges
			ngOnInit
			ngDoCheck
			ngOnDestroy
		2、组件特有的钩子
			ngAfterContentInit
			ngAfterContentChecked
			ngAfterViewInit
			ngAfterViewChecked
			
	Angular 2 指令生命周期钩子详解
		1、构造函数

		constructor是ES6中class中新增的属性，当class类实例化的时候调用constructor，来初始化类。Angular中的组件就是基于class类实现的，在Angular中，constructor用于注入依赖。
		组件的构造函数会在所有的生命周期钩子之前被调用，它主要用于依赖注入或执行简单的数据初始化操作。

		import { Component, ElementRef } from '@angular/core';

		@Component({
		  selector: 'my-app',
		  template: `
		    <h1>Welcome to Angular World</h1>
		    <p>Hello {{name}}</p>
		  `,
		})
		export class AppComponent {
		  name: string = '';

		  constructor(public elementRef: ElementRef) {//使用构造注入的方式注入依赖对象
		    // 执行初始化操作
		    this.name = 'Semlinker'; 
		  }
		}

		2、ngOnInit

		在第一次 ngOnChanges 执行之后调用，并且只被调用一次。它主要用于执行组件的其它初始化操作或获取组件输入的属性值。
		在Angular第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。
		使用ngOnInit()有两个原因：
		a：在构造函数之后马上执行复杂的初始化逻辑
		b：在Angular设置完输入属性之后，对该组件进行准备。

		import { Component, Input, OnInit } from '@angular/core';

		@Component({
		    selector: 'exe-child',
		    template: `
		     <p>父组件的名称：{{pname}} </p>
		    `
		})
		export class ChildComponent implements OnInit {
		    @Input()
		    pname: string; // 父组件的名称

		    constructor() {
		        console.log('ChildComponent constructor', this.pname); 
		        // Output：undefined
		    }

		    ngOnInit() {
		        console.log('ChildComponent ngOnInit', this.pname); 
		        // output: 输入的pname值
		    }
		}

		3、ngOnChanges

		当数据绑定输入属性的值发生变化的时候，Angular 将会主动调用 ngOnChanges 方法。它会获得一个 SimpleChanges 对象，包含绑定属性的新值和旧值，它主要用于监测组件输入属性的变化。当Angular（重新）设置数据绑定输入属性时响应。 该方法接受当前和上一属性值的SimpleChanges对象。
		当被绑定的输入属性的值发生变化时调用，首次调用一定会发生在ngOnInit()之前。

		import { Component } from '@angular/core';

		@Component({
		  selector: 'my-app',
		  template: `
		    <h4>Welcome to Angular World</h4>
		    <exe-child name="exe-child-component"></exe-child>
		  `,
		})
		export class AppComponent { }
		/*
		    child.component.ts
		*/
		import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';

		@Component({
		    selector: 'exe-child',
		    template: `
		      <p>Child Component</p>  
		      <p>{{ name }}</p>
		    `
		})
		export class ChildComponent implements OnChanges{
		    @Input()
		    name: string;

		    ngOnChanges(changes: SimpleChanges) {
		        console.dir(changes);
		    }
		}

		4、ngOnDestory

		在指令被销毁前，将会调用 ngOnDestory 方法。它主要用于执行一些清理操作，比如：移除事件监听、清除定时器、退订 Observable 等。
		当Angular每次销毁指令/组件之前调用并清扫。 在这儿反订阅可观察对象和分离事件处理器，以防内存泄漏。
		在Angular销毁指令/组件之前调用。
		一些清理逻辑必须在Angular销毁指令之前运行，把它们放在ngOnDestroy()中。这是在该组件消失之前，可用来通知应用程序中其它部分的最后一个时间点。这里是用来释放那些不会被垃圾收集器自动回收的各类资源的地方。 取消那些对可观察对象和DOM事件的订阅。停止定时器。注销该指令曾注册到全局服务或应用级服务中的各种回调函数。 如果不这么做，就会有导致内存泄露的风险。

		@Directive({
		    selector: '[destroyDirective]'
		})
		export class OnDestroyDirective implements OnDestroy {
		  sayHello: number;
		  
		  constructor() {
		    this.sayHiya = window.setInterval(() => console.log('hello'), 1000);
		  }
		  
		  ngOnDestroy() {
		     window.clearInterval(this.sayHiya);
		  }
		}

		5、ngDoCheck

		当组件的输入属性发生变化时，将会触发 ngDoCheck 方法。我们可以使用该方法，自定义我们的检测逻辑。它也可以用来加速我们变化检测的速度。
		检测，并在发生Angular无法或不愿意自己检测的变化时作出反应。
		在每个Angular变更检测周期中调用，ngOnChanges()和ngOnInit()之后。

		6、ngAfterContentInit

		在组件使用 ng-content 指令的情况下，Angular 会在将外部内容放到视图后用。它主要用于获取通过 @ContentChild 或 @ContentChildren 属性装饰器查询的内容视图元素。
		当把内容投影进组件之后调用。第一次ngDoCheck()之后调用，只调用一次。

		7、ngAfterContentChecked

		在组件使用 ng-content 指令的情况下，Angular 会在检测到外部内容的绑定或者每次变化的时候调用。
		每次完成被投影组件内容的变更检测之后调用。ngAfterContentInit()和每次ngDoCheck()之后调用

		8、ngAfterViewInit

		在组件相应的视图初始化之后调用，它主要用于获取通过 @ViewChild 或 @ViewChildren 属性装饰器查询的视图元素。
		初始化完组件视图及其子视图之后调用。第一次ngAfterContentChecked()之后调用，只调用一次。

		9、ngAfterViewChecked

		组件每次检查视图时调用
		每次做完组件视图和子视图的变更检测之后调用。
		ngAfterViewInit()和每次ngAfterContentChecked()之后调用。

		10、AfterContent钩子和AfterView钩子的区别

		AfterContent钩子和AfterView相似。关键的不同点是子组件的类型不同。
		1、AfterView钩子所关心的是ViewChildren，这些子组件的元素标签会出现在该组件的模板里面。
		2、AfterContent钩子所关心的是ContentChildren，这些子组件被Angular投影进该组件中。
























